# Test installation of the latest version from PyPI works.
# We make sure that we run the tests that apply to the version we installed,
# rather than the latest tests in main.
# The reason we do this, is that we want this workflow to test
# that installing from PyPI/conda leads to a correct installation.
# If we tested against main, the tests could fail
# because the tests from main require the new features in main to pass.
name: Test installation PyPI

on:
  pull_request:
  workflow_dispatch:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # This means At 03:00 on Wednesday.
    # see https://crontab.guru/#0_0_*_*_3
    - cron:  '0 3 * * 3'

jobs:
  test-pypi-install:
    name: Test PyPI install ${{ matrix.install-target }} (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: [ "3.9", "3.10", "3.11" ]
        # Check both 'library' install and the 'application' (i.e. locked) install
        install-target: ["openscm-zenodo", "openscm-zenodo[locked]"]
    steps:
    - name: Set up Python "${{ matrix.python-version }}"
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: "${{ matrix.python-version }}"
    - name: Install
      run: |
        pip install --upgrade pip wheel
        pip install "${{ matrix.install-target }}" 2>stderr.txt
    - name: Check no warnings
      if: matrix.os != 'windows-latest'
      run: |
        if grep -q "WARN" stderr.txt; then echo "Warnings in pip install output" && cat stderr.txt && exit 1; else exit 0; fi
    - name: Get version non-windows
      if: matrix.os != 'windows-latest'
      run: |
        INSTALLED_VERSION=`python -c 'import openscm_zenodo; print(f"v{openscm_zenodo.__version__}")'`
        echo $INSTALLED_VERSION
        echo "INSTALLED_VERSION=$INSTALLED_VERSION" >> $GITHUB_ENV
    - name: Get version windows
      if: matrix.os == 'windows-latest'
      run: |
        python -c 'import openscm_zenodo; f = open("version.txt"); f.write(f"v{openscm_zenodo.__version__}"); f.close()'
        type version.txt
        set /p INSTALLED_VERSION=<version.txt
        echo %INSTALLED_VERSION%
        echo ("INSTALLED_VERSION=%INSTALLED_VERSION%") >> $env:GITHUB_ENV
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ env.INSTALLED_VERSION }}
    - name: Test installation
      run: |
        which python
        python scripts/test-install.py
    - name: Install pytest
      run: |
        pip install pytest
    - name: Run tests
      run: |
        pytest tests -r a -vv tests src --doctest-modules
